/*
 * Copyright 2001-2008 Artima, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.scalatest.matchers

import org.scalatest._
import Helper._

trait LengthMatchers extends Assertions with MatchersBase { matchers => 

  // The getLength and getSize field conversions seem inconsistent with
// what I do in symbol HavePropertyMatchers. It isn't, though because the difference is here
// it's a Scala field and there a Java field: a val getLength is a 
// perfectly valid Scala way to get a JavaBean property Java method in the bytecodes.

  /**
   * This class is part of the ScalaTest matchers DSL. Please see the documentation for <a href="ShouldMatchers.html"><code>ShouldMatchers</code></a> or <a href="MustMatchers.html"><code>MustMatchers</code></a> for an overview of
   * the matchers DSL.
   *
   * <p>
   * Subclasses of this abstract class are used as the result of implicit conversions from the various structural types that
   * are considered to represent length: <code>length</code> or <code>getLength</code> methods or fields that return <code>Int</code>
   * or <code>Long</code>. This enables the <code>have length (7)</code> syntax to be used with any object that has a length.
   * The implicit conversion methods that result in this type are:
   * </p>
   *
   * <ul>
   * <li><code>convertLengthFieldToIntLengthWrapper</code></li>
   * <li><code>convertLengthMethodToIntLengthWrapper</code></li>
   * <li><code>convertGetLengthFieldToIntLengthWrapper</code></li>
   * <li><code>convertGetLengthMethodToIntLengthWrapper</code></li>
   * <li><code>convertLengthFieldToLongLengthWrapper</code></li>
   * <li><code>convertLengthFieldToLongLengthWrapper</code></li>
   * <li><code>convertGetLengthFieldToLongLengthWrapper</code></li>
   * <li><code>convertGetLengthMethodToLongLengthWrapper</code></li>
   * </ul>
   *
   * @author Bill Venners
   */
  abstract class LengthWrapper {
    def length: Long
  }

  /**
   * This implicit conversion method converts an object with a <code>length</code> field of type <code>Int</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   */
  implicit def convertLengthFieldToIntLengthWrapper(o: { val length: Int }): LengthWrapper =
    new LengthWrapper {
      def length: Long = o.length
    }

  /**
   * This implicit conversion method converts an object with a <code>length</code> method of type <code>Int</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   */
  implicit def convertLengthMethodToIntLengthWrapper(o: { def length(): Int }): LengthWrapper =
    new LengthWrapper {
      def length: Long = o.length()
    }

  /**
   * This implicit conversion method converts an object with a parameterless <code>length</code> method of type <code>Int</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   */
  implicit def convertLengthParameterlessMethodToIntLengthWrapper(o: { def length: Int }): LengthWrapper = new LengthWrapper { def length: Long = o.length }

  /**
   * This implicit conversion method converts an object with a <code>getLength</code> field of type <code>Int</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   */
  implicit def convertGetLengthFieldToIntLengthWrapper(o: { val getLength: Int }): LengthWrapper =
    new LengthWrapper {
      def length: Long = o.getLength
    }

  /**
   * This implicit conversion method converts an object with a <code>getLength</code> method of type <code>Int</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   */
  implicit def convertGetLengthMethodToIntLengthWrapper(o: { def getLength(): Int }): LengthWrapper =
    new LengthWrapper {
      def length: Long = o.getLength()
    }

  /**
   * This implicit conversion method converts an object with a parameterless <code>getLength</code> method of type <code>Int</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   * */
  implicit def convertGetLengthParameterlessMethodToIntLengthWrapper(o: { def getLength: Int }): LengthWrapper = new LengthWrapper { def length: Long = o.getLength }

  /**
   * This implicit conversion method converts an object with a <code>length</code> field of type <code>Long</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   */
  implicit def convertLengthFieldToLongLengthWrapper(o: { val length: Long }): LengthWrapper =
    new LengthWrapper {
      def length: Long = o.length
    }

  /**
   * This implicit conversion method converts an object with a <code>length</code> method of type <code>Long</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   */
  implicit def convertLengthMethodToLongLengthWrapper(o: { def length(): Long }): LengthWrapper =
    new LengthWrapper {
      def length: Long = o.length()
    }

  /**
   * This implicit conversion method converts an object with a parameterless <code>length</code> method of type <code>Long</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   * */
  implicit def convertLengthParameterlessMethodToLongLengthWrapper(o: { def length: Long }): LengthWrapper = new LengthWrapper { def length: Long = o.length }

  /**
   * This implicit conversion method converts an object with a <code>getLength</code> field of type <code>Long</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   */
  implicit def convertGetLengthFieldToLongLengthWrapper(o: { val getLength: Long }): LengthWrapper =
    new LengthWrapper {
      def length = o.getLength
    }

  /**
   * This implicit conversion method converts an object with a <code>getLength</code> method of type <code>Long</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   */
  implicit def convertGetLengthMethodToLongLengthWrapper(o: { def getLength(): Long }): LengthWrapper =
    new LengthWrapper {
      def length: Long = o.getLength()
    }

  /**
   * This implicit conversion method converts an object with a parameterless <code>getLength</code> method of type <code>Long</code> to a
   * <code>LengthWrapper</code>, to enable that object to be used with the <code>have length (7)</code> syntax.
   * */
  implicit def convertGetLengthParameterlessMethodToLongLengthWrapper(o: { def getLength: Long }): LengthWrapper = new LengthWrapper { def length: Long = o.getLength }
  
  /**
   * This class is part of the ScalaTest matchers DSL. Please see the documentation for <a href="ShouldMatchers.html"><code>ShouldMatchers</code></a> or <a href="MustMatchers.html"><code>MustMatchers</code></a> for an overview of
   * the matchers DSL.
   *
   * @author Bill Venners
   */
  final class ResultOfNotWordForLengthWrapper[A <: AnyRef <% LengthWrapper](left: A, shouldBeTrue: Boolean)
      extends ResultOfNotWordForAnyRef(left, shouldBeTrue) {

/* TODO What's going on? Why can I drop this and still get a compile
// TODO: This should be for "lengthy should not have length (12)" Try that test.
    def have(resultOfLengthWordApplication: ResultOfLengthWordApplication) {
      val right = resultOfLengthWordApplication.expectedLength
      if ((left.length == right) != shouldBeTrue) {
          throw newTestFailedException(
            FailureMessages(
             if (shouldBeTrue) "didNotHaveExpectedLength" else "hadExpectedLength",
              left,
              right
            )
          )
      }
    }
*/
  }
  
  /**
   * This class is part of the ScalaTest matchers DSL. Please see the documentation for <a href="ShouldMatchers.html"><code>ShouldMatchers</code></a> or <a href="MustMatchers.html"><code>MustMatchers</code></a> for an overview of
   * the matchers DSL.
   *
   * @author Bill Venners
   */
  final class ResultOfHaveWordForLengthWrapper[A <% LengthWrapper](left: A, shouldBeTrue: Boolean) {

    /**
     * This method enables the following syntax:
     *
     * <pre class="stHighlight">
     * obj should have length (2)
     *                      ^
     * </pre>
     *
     * <p>
     * This method is ultimately invoked for objects that have a <code>length</code> property structure
     * of type <code>Int</code>,
     * but is of a type that is not handled by implicit conversions from nominal types such as
     * <code>scala.Seq</code>, <code>java.lang.String</code>, and <code>java.util.List</code>.
     * </p>
     */
    def length(expectedLength: Int) {
      if ((left.length == expectedLength) != shouldBeTrue)
        throw newTestFailedException(
          FailureMessages(
            if (shouldBeTrue) "didNotHaveExpectedLength" else "hadExpectedLength",
            left,
            expectedLength)
        )
    }

    /**
     * This method enables the following syntax:
     *
     * <pre class="stHighlight">
     * obj should have length (2L)
     *                      ^
     * </pre>
     *
     * <p>
     * This method is ultimately invoked for objects that have a <code>length</code> property structure
     * of type <code>Long</code>,
     * but is of a type that is not handled by implicit conversions from nominal types such as
     * <code>scala.Seq</code>, <code>java.lang.String</code>, and <code>java.util.List</code>.
     * </p>
     */
    def length(expectedLength: Long) {
      if ((left.length == expectedLength) != shouldBeTrue)
        throw newTestFailedException(
          FailureMessages(
            if (shouldBeTrue) "didNotHaveExpectedLength" else "hadExpectedLength",
            left,
            expectedLength)
        )
    }
  }
}